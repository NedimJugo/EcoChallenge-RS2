// <auto-generated />
using System;
using EcoChallenge.Services.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EcoChallenge.Services.Migrations
{
    [DbContext(typeof(EcoChallengeDbContext))]
    [Migration("20250711231204_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.ActivityHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityType")
                        .HasColumnType("int")
                        .HasColumnName("activity_type");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int?>("DonationId")
                        .HasColumnType("int");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<decimal?>("MoneyEarned")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("money_earned");

                    b.Property<int?>("PointsEarned")
                        .HasColumnType("int")
                        .HasColumnName("points_earned");

                    b.Property<int>("RelatedEntityId")
                        .HasColumnType("int")
                        .HasColumnName("related_entity_id");

                    b.Property<int>("RelatedEntityType")
                        .HasColumnType("int")
                        .HasColumnName("related_entity_type");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int");

                    b.Property<int?>("RewardId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DonationId");

                    b.HasIndex("EventId");

                    b.HasIndex("RequestId");

                    b.HasIndex("RewardId");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityHistories");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.AdminLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("action_description");

                    b.Property<int>("ActionType")
                        .HasColumnType("int")
                        .HasColumnName("action_type");

                    b.Property<int>("AdminUserId")
                        .HasColumnType("int")
                        .HasColumnName("admin_user_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("ip_address");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("new_values");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("old_values");

                    b.Property<int?>("TargetEntityId")
                        .HasColumnType("int")
                        .HasColumnName("target_entity_id");

                    b.Property<int>("TargetEntityType")
                        .HasColumnType("int")
                        .HasColumnName("target_entity_type");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("user_agent");

                    b.HasKey("Id");

                    b.HasIndex("AdminUserId");

                    b.ToTable("AdminLogs");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Badge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BadgeType")
                        .HasColumnType("int")
                        .HasColumnName("badge_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int>("CriteriaType")
                        .HasColumnType("int")
                        .HasColumnName("criteria_type");

                    b.Property<int>("CriteriaValue")
                        .HasColumnType("int")
                        .HasColumnName("criteria_value");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("IconUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("icon_url");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Badges");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsAdminMessage")
                        .HasColumnType("bit")
                        .HasColumnName("is_admin_message");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsReported")
                        .HasColumnType("bit")
                        .HasColumnName("is_reported");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message_text");

                    b.Property<int>("MessageType")
                        .HasColumnType("int")
                        .HasColumnName("message_type");

                    b.Property<string>("ReportReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("report_reason");

                    b.Property<int?>("ReportedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("reported_by_user_id");

                    b.Property<int>("SenderUserId")
                        .HasColumnType("int")
                        .HasColumnName("sender_user_id");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("sent_at");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("ReportedByUserId");

                    b.HasIndex("SenderUserId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Donation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("currency");

                    b.Property<string>("DonationMessage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("donation_message");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("bit")
                        .HasColumnName("is_anonymous");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("organization_id");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("payment_method");

                    b.Property<string>("PaymentReference")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("payment_reference");

                    b.Property<int>("PointsEarned")
                        .HasColumnType("int")
                        .HasColumnName("points_earned");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("processed_at");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("Donations");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AdminApproved")
                        .HasColumnType("bit")
                        .HasColumnName("admin_approved");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("int")
                        .HasColumnName("creator_user_id");

                    b.Property<int>("CurrentParticipants")
                        .HasColumnType("int")
                        .HasColumnName("current_participants");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int")
                        .HasColumnName("duration_minutes");

                    b.Property<string>("EquipmentList")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("equipment_list");

                    b.Property<bool>("EquipmentProvided")
                        .HasColumnType("bit")
                        .HasColumnName("equipment_provided");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("event_date");

                    b.Property<TimeSpan>("EventTime")
                        .HasColumnType("time")
                        .HasColumnName("event_time");

                    b.Property<int>("EventType")
                        .HasColumnType("int")
                        .HasColumnName("event_type");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsPaidRequest")
                        .HasColumnType("bit")
                        .HasColumnName("is_paid_request");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("int")
                        .HasColumnName("max_participants");

                    b.Property<string>("MeetingPoint")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("meeting_point");

                    b.Property<int?>("RelatedRequestId")
                        .HasColumnType("int")
                        .HasColumnName("related_request_id");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("EventDate");

                    b.HasIndex("LocationId");

                    b.HasIndex("RelatedRequestId");

                    b.HasIndex("RequestId");

                    b.HasIndex("Status");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.EventParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("joined_at");

                    b.Property<int>("PointsEarned")
                        .HasColumnType("int")
                        .HasColumnName("points_earned");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("attendance_status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("EventId", "UserId")
                        .IsUnique();

                    b.ToTable("EventParticipants");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Gallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("caption");

                    b.Property<int>("DislikesCount")
                        .HasColumnType("int")
                        .HasColumnName("dislikes_count");

                    b.Property<int?>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    b.Property<int>("ImageType")
                        .HasColumnType("int")
                        .HasColumnName("image_type");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit")
                        .HasColumnName("is_approved");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit")
                        .HasColumnName("is_featured");

                    b.Property<bool>("IsReported")
                        .HasColumnType("bit")
                        .HasColumnName("is_reported");

                    b.Property<int>("LikesCount")
                        .HasColumnType("int")
                        .HasColumnName("likes_count");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    b.Property<int>("ReportCount")
                        .HasColumnType("int")
                        .HasColumnName("report_count");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int")
                        .HasColumnName("request_id");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("uploaded_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("uploader_user_id");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("IsFeatured");

                    b.HasIndex("LocationId");

                    b.HasIndex("RequestId");

                    b.HasIndex("UploadedAt");

                    b.HasIndex("UserId");

                    b.ToTable("Galleries", t =>
                        {
                            t.HasCheckConstraint("CK_Gallery_RelatedEntity", "request_id IS NOT NULL OR event_id IS NOT NULL");
                        });
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.GalleryReaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int>("GalleryId")
                        .HasColumnType("int")
                        .HasColumnName("gallery_id");

                    b.Property<int?>("GalleryId1")
                        .HasColumnType("int");

                    b.Property<int>("ReactionType")
                        .HasColumnType("int")
                        .HasColumnName("reaction_type");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("GalleryId1");

                    b.HasIndex("UserId");

                    b.HasIndex("GalleryId", "UserId")
                        .IsUnique();

                    b.ToTable("GalleryReactions");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(10, 8)
                        .HasColumnType("decimal(10,8)")
                        .HasColumnName("latitude");

                    b.Property<int>("LocationType")
                        .HasColumnType("int")
                        .HasColumnName("location_type");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(11, 8)
                        .HasColumnType("decimal(11,8)")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("postal_code");

                    b.HasKey("Id");

                    b.HasIndex("Latitude", "Longitude");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsPushed")
                        .HasColumnType("bit")
                        .HasColumnName("is_pushed");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit")
                        .HasColumnName("is_read");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int")
                        .HasColumnName("notification_type");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("read_at");

                    b.Property<int?>("RelatedEntityId")
                        .HasColumnType("int")
                        .HasColumnName("related_entity_id");

                    b.Property<int?>("RelatedEntityType")
                        .HasColumnType("int")
                        .HasColumnName("related_entity_type");

                    b.Property<int?>("RewardId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("title");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RewardId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("category");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("contact_email");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("contact_phone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit")
                        .HasColumnName("is_verified");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("logo_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("website");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdminNotes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("admin_notes");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("report_description");

                    b.Property<int>("EntityId")
                        .HasColumnType("int")
                        .HasColumnName("reported_entity_id");

                    b.Property<int>("EntityType")
                        .HasColumnType("int")
                        .HasColumnName("reported_entity_type");

                    b.Property<int>("Reason")
                        .HasColumnType("int")
                        .HasColumnName("report_reason");

                    b.Property<int>("ReporterUserId")
                        .HasColumnType("int")
                        .HasColumnName("reporter_user_id");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("resolved_at");

                    b.Property<int?>("ResolvedByAdminId")
                        .HasColumnType("int")
                        .HasColumnName("resolved_by_admin_id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("ReporterUserId");

                    b.HasIndex("ResolvedByAdminId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ActualRewardMoney")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("actual_reward_money");

                    b.Property<int>("ActualRewardPoints")
                        .HasColumnType("int")
                        .HasColumnName("actual_reward_points");

                    b.Property<string>("AdminNotes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("admin_notes");

                    b.Property<string>("AiAnalysisResult")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ai_analysis_result");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("approved_at");

                    b.Property<int?>("AssignedAdminId")
                        .HasColumnType("int")
                        .HasColumnName("assigned_admin_id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("completed_at");

                    b.Property<string>("CompletionImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("completion_image_url");

                    b.Property<string>("CompletionNotes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("completion_notes");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int>("EstimatedAmount")
                        .HasColumnType("int")
                        .HasColumnName("estimated_amount");

                    b.Property<int?>("EstimatedCleanupTime")
                        .HasColumnType("int")
                        .HasColumnName("estimated_cleanup_time");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image_url");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    b.Property<DateTime?>("ProposedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("proposed_date");

                    b.Property<TimeSpan?>("ProposedTime")
                        .HasColumnType("time")
                        .HasColumnName("proposed_time");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("rejection_reason");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<decimal>("SuggestedRewardMoney")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("suggested_reward_money");

                    b.Property<int>("SuggestedRewardPoints")
                        .HasColumnType("int")
                        .HasColumnName("suggested_reward_points");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<int>("UrgencyLevel")
                        .HasColumnType("int")
                        .HasColumnName("urgency_level");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("WasteType")
                        .HasColumnType("int")
                        .HasColumnName("waste_type");

                    b.HasKey("Id");

                    b.HasIndex("AssignedAdminId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("LocationId");

                    b.HasIndex("Status");

                    b.HasIndex("UserId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Reward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("approved_at");

                    b.Property<int?>("ApprovedByAdminId")
                        .HasColumnType("int")
                        .HasColumnName("approved_by_admin_id");

                    b.Property<int?>("BadgeId")
                        .HasColumnType("int")
                        .HasColumnName("badge_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("currency");

                    b.Property<int?>("DonationId")
                        .HasColumnType("int")
                        .HasColumnName("donation_id");

                    b.Property<int?>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    b.Property<decimal>("MoneyAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("money_amount");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("paid_at");

                    b.Property<int>("PointsAmount")
                        .HasColumnType("int")
                        .HasColumnName("points_amount");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reason");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int")
                        .HasColumnName("request_id");

                    b.Property<int>("RewardType")
                        .HasColumnType("int")
                        .HasColumnName("reward_type");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByAdminId");

                    b.HasIndex("BadgeId");

                    b.HasIndex("DonationId");

                    b.HasIndex("EventId");

                    b.HasIndex("RequestId");

                    b.HasIndex("UserId");

                    b.ToTable("Rewards");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.SystemSetting", b =>
                {
                    b.Property<int>("SettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettingId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit")
                        .HasColumnName("is_public");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("setting_key");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("setting_type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedByAdminId")
                        .HasColumnType("int")
                        .HasColumnName("updated_by_admin_id");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("setting_value");

                    b.HasKey("SettingId");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("UpdatedByAdminId");

                    b.ToTable("SystemSettings");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_of_birth");

                    b.Property<DateTime?>("DeactivatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deactivated_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_login");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<string>("ProfileImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("profile_image_url");

                    b.Property<int>("TotalCleanups")
                        .HasColumnType("int")
                        .HasColumnName("total_cleanups");

                    b.Property<int>("TotalEventsOrganized")
                        .HasColumnType("int")
                        .HasColumnName("total_events_organized");

                    b.Property<int>("TotalEventsParticipated")
                        .HasColumnType("int")
                        .HasColumnName("total_events_participated");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("int")
                        .HasColumnName("total_points");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserType")
                        .HasColumnType("int")
                        .HasColumnName("user_type");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.UserBadge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BadgeId")
                        .HasColumnType("int")
                        .HasColumnName("badge_id");

                    b.Property<DateTime>("EarnedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("earned_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("BadgeId");

                    b.HasIndex("UserId", "BadgeId")
                        .IsUnique();

                    b.ToTable("UserBadges");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.ActivityHistory", b =>
                {
                    b.HasOne("EcoChallenge.Services.Database.Entities.Donation", null)
                        .WithMany("ActivityLogs")
                        .HasForeignKey("DonationId");

                    b.HasOne("EcoChallenge.Services.Database.Entities.Event", null)
                        .WithMany("ActivityLogs")
                        .HasForeignKey("EventId");

                    b.HasOne("EcoChallenge.Services.Database.Entities.Request", null)
                        .WithMany("History")
                        .HasForeignKey("RequestId");

                    b.HasOne("EcoChallenge.Services.Database.Entities.Reward", null)
                        .WithMany("ActivityLogs")
                        .HasForeignKey("RewardId");

                    b.HasOne("EcoChallenge.Services.Database.Entities.User", "User")
                        .WithMany("ActivityHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.AdminLog", b =>
                {
                    b.HasOne("EcoChallenge.Services.Database.Entities.User", "AdminUser")
                        .WithMany("AdminLogs")
                        .HasForeignKey("AdminUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AdminUser");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.ChatMessage", b =>
                {
                    b.HasOne("EcoChallenge.Services.Database.Entities.Event", "Event")
                        .WithMany("ChatMessages")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoChallenge.Services.Database.Entities.User", "ReportedBy")
                        .WithMany()
                        .HasForeignKey("ReportedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EcoChallenge.Services.Database.Entities.User", "Sender")
                        .WithMany("ChatMessages")
                        .HasForeignKey("SenderUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("ReportedBy");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Donation", b =>
                {
                    b.HasOne("EcoChallenge.Services.Database.Entities.Organization", "Organization")
                        .WithMany("Donations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EcoChallenge.Services.Database.Entities.User", "User")
                        .WithMany("Donations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Event", b =>
                {
                    b.HasOne("EcoChallenge.Services.Database.Entities.User", "Creator")
                        .WithMany("CreatedEvents")
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EcoChallenge.Services.Database.Entities.Location", "Location")
                        .WithMany("Events")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EcoChallenge.Services.Database.Entities.Request", "RelatedRequest")
                        .WithMany()
                        .HasForeignKey("RelatedRequestId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EcoChallenge.Services.Database.Entities.Request", null)
                        .WithMany("Events")
                        .HasForeignKey("RequestId");

                    b.Navigation("Creator");

                    b.Navigation("Location");

                    b.Navigation("RelatedRequest");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.EventParticipant", b =>
                {
                    b.HasOne("EcoChallenge.Services.Database.Entities.Event", "Event")
                        .WithMany("Participants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoChallenge.Services.Database.Entities.User", "User")
                        .WithMany("EventParticipants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Gallery", b =>
                {
                    b.HasOne("EcoChallenge.Services.Database.Entities.Event", "Event")
                        .WithMany("Galleries")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EcoChallenge.Services.Database.Entities.Location", "Location")
                        .WithMany("Galleries")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EcoChallenge.Services.Database.Entities.Request", "Request")
                        .WithMany("Galleries")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EcoChallenge.Services.Database.Entities.User", "User")
                        .WithMany("Galleries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Location");

                    b.Navigation("Request");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.GalleryReaction", b =>
                {
                    b.HasOne("EcoChallenge.Services.Database.Entities.Gallery", "Gallery")
                        .WithMany()
                        .HasForeignKey("GalleryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoChallenge.Services.Database.Entities.Gallery", null)
                        .WithMany("GalleryReactions")
                        .HasForeignKey("GalleryId1");

                    b.HasOne("EcoChallenge.Services.Database.Entities.User", "User")
                        .WithMany("GalleryReactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gallery");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Notification", b =>
                {
                    b.HasOne("EcoChallenge.Services.Database.Entities.Reward", null)
                        .WithMany("Notifications")
                        .HasForeignKey("RewardId");

                    b.HasOne("EcoChallenge.Services.Database.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Report", b =>
                {
                    b.HasOne("EcoChallenge.Services.Database.Entities.User", "Reporter")
                        .WithMany("Reports")
                        .HasForeignKey("ReporterUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EcoChallenge.Services.Database.Entities.User", "ResolvedBy")
                        .WithMany("ResolvedReports")
                        .HasForeignKey("ResolvedByAdminId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Reporter");

                    b.Navigation("ResolvedBy");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Request", b =>
                {
                    b.HasOne("EcoChallenge.Services.Database.Entities.User", "AssignedAdmin")
                        .WithMany("AssignedRequests")
                        .HasForeignKey("AssignedAdminId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EcoChallenge.Services.Database.Entities.Location", "Location")
                        .WithMany("Requests")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EcoChallenge.Services.Database.Entities.User", "User")
                        .WithMany("Requests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedAdmin");

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Reward", b =>
                {
                    b.HasOne("EcoChallenge.Services.Database.Entities.User", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedByAdminId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EcoChallenge.Services.Database.Entities.Badge", "Badge")
                        .WithMany("Rewards")
                        .HasForeignKey("BadgeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EcoChallenge.Services.Database.Entities.Donation", "Donation")
                        .WithMany("Rewards")
                        .HasForeignKey("DonationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EcoChallenge.Services.Database.Entities.Event", "Event")
                        .WithMany("Rewards")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EcoChallenge.Services.Database.Entities.Request", "Request")
                        .WithMany("Rewards")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EcoChallenge.Services.Database.Entities.User", "User")
                        .WithMany("Rewards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("Badge");

                    b.Navigation("Donation");

                    b.Navigation("Event");

                    b.Navigation("Request");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.SystemSetting", b =>
                {
                    b.HasOne("EcoChallenge.Services.Database.Entities.User", "UpdatedBy")
                        .WithMany("UpdatedSettings")
                        .HasForeignKey("UpdatedByAdminId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.UserBadge", b =>
                {
                    b.HasOne("EcoChallenge.Services.Database.Entities.Badge", "Badge")
                        .WithMany("UserBadges")
                        .HasForeignKey("BadgeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EcoChallenge.Services.Database.Entities.User", "User")
                        .WithMany("UserBadges")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Badge");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Badge", b =>
                {
                    b.Navigation("Rewards");

                    b.Navigation("UserBadges");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Donation", b =>
                {
                    b.Navigation("ActivityLogs");

                    b.Navigation("Rewards");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Event", b =>
                {
                    b.Navigation("ActivityLogs");

                    b.Navigation("ChatMessages");

                    b.Navigation("Galleries");

                    b.Navigation("Participants");

                    b.Navigation("Rewards");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Gallery", b =>
                {
                    b.Navigation("GalleryReactions");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Location", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Galleries");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Organization", b =>
                {
                    b.Navigation("Donations");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Request", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Galleries");

                    b.Navigation("History");

                    b.Navigation("Rewards");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Reward", b =>
                {
                    b.Navigation("ActivityLogs");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.User", b =>
                {
                    b.Navigation("ActivityHistories");

                    b.Navigation("AdminLogs");

                    b.Navigation("AssignedRequests");

                    b.Navigation("ChatMessages");

                    b.Navigation("CreatedEvents");

                    b.Navigation("Donations");

                    b.Navigation("EventParticipants");

                    b.Navigation("Galleries");

                    b.Navigation("GalleryReactions");

                    b.Navigation("Notifications");

                    b.Navigation("Reports");

                    b.Navigation("Requests");

                    b.Navigation("ResolvedReports");

                    b.Navigation("Rewards");

                    b.Navigation("UpdatedSettings");

                    b.Navigation("UserBadges");
                });
#pragma warning restore 612, 618
        }
    }
}
