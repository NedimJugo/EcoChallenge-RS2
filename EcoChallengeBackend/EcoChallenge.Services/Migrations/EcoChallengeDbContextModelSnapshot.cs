// <auto-generated />
using System;
using EcoChallenge.Services.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EcoChallenge.Services.Migrations
{
    [DbContext(typeof(EcoChallengeDbContext))]
    partial class EcoChallengeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.ActivityHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityType")
                        .HasColumnType("int")
                        .HasColumnName("activity_type");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int?>("DonationId")
                        .HasColumnType("int");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<decimal?>("MoneyEarned")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("money_earned");

                    b.Property<int?>("PointsEarned")
                        .HasColumnType("int")
                        .HasColumnName("points_earned");

                    b.Property<int>("RelatedEntityTypeId")
                        .HasColumnType("int")
                        .HasColumnName("related_entity_type_id");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int");

                    b.Property<int?>("RewardId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DonationId");

                    b.HasIndex("EventId");

                    b.HasIndex("RelatedEntityTypeId");

                    b.HasIndex("RequestId");

                    b.HasIndex("RewardId");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityHistories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityType = 0,
                            CreatedAt = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PointsEarned = 0,
                            RelatedEntityTypeId = 1,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.AdminLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("action_description");

                    b.Property<int>("ActionType")
                        .HasColumnType("int")
                        .HasColumnName("action_type");

                    b.Property<int>("AdminUserId")
                        .HasColumnType("int")
                        .HasColumnName("admin_user_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("ip_address");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("new_values");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("old_values");

                    b.Property<int>("TargetEntityTypeId")
                        .HasColumnType("int")
                        .HasColumnName("target_entity_type_id");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("user_agent");

                    b.HasKey("Id");

                    b.HasIndex("AdminUserId");

                    b.HasIndex("TargetEntityTypeId");

                    b.ToTable("AdminLogs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActionDescription = "Approved request #2",
                            ActionType = 0,
                            AdminUserId = 1,
                            CreatedAt = new DateTime(2025, 6, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetEntityTypeId = 2
                        });
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Badge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BadgeTypeId")
                        .HasColumnType("int")
                        .HasColumnName("badge_type_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int>("CriteriaTypeId")
                        .HasColumnType("int")
                        .HasColumnName("criteria_type_id");

                    b.Property<int>("CriteriaValue")
                        .HasColumnType("int")
                        .HasColumnName("criteria_value");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("IconUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("icon_url");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("BadgeTypeId");

                    b.HasIndex("CriteriaTypeId");

                    b.ToTable("Badges");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BadgeTypeId = 3,
                            CreatedAt = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CriteriaTypeId = 1,
                            CriteriaValue = 1,
                            IsActive = true,
                            Name = "First Cleanup"
                        },
                        new
                        {
                            Id = 2,
                            BadgeTypeId = 2,
                            CreatedAt = new DateTime(2025, 4, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CriteriaTypeId = 4,
                            CriteriaValue = 1,
                            IsActive = true,
                            Name = "Donation Star"
                        });
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.BadgeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BadgeTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Participation"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Achievement"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Milestone"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Special"
                        });
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.CriteriaType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CriteriaType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Count"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Points"
                        },
                        new
                        {
                            Id = 3,
                            Name = "EventsOrganized"
                        },
                        new
                        {
                            Id = 4,
                            Name = "DonationsMade"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Special"
                        });
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Donation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("currency");

                    b.Property<string>("DonationMessage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("donation_message");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("bit")
                        .HasColumnName("is_anonymous");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("organization_id");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("payment_method");

                    b.Property<string>("PaymentReference")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("payment_reference");

                    b.Property<int>("PointsEarned")
                        .HasColumnType("int")
                        .HasColumnName("points_earned");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("processed_at");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Donations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 20.00m,
                            CreatedAt = new DateTime(2025, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Currency = "USD",
                            IsAnonymous = false,
                            OrganizationId = 1,
                            PointsEarned = 0,
                            ProcessedAt = new DateTime(2025, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.DonationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DonationStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Failed"
                        });
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.EntityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EntityTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Request"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Event"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Donation"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Badge"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Reward"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Message"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Gallery"
                        },
                        new
                        {
                            Id = 8,
                            Name = "User "
                        });
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AdminApproved")
                        .HasColumnType("bit")
                        .HasColumnName("admin_approved");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("int")
                        .HasColumnName("creator_user_id");

                    b.Property<int>("CurrentParticipants")
                        .HasColumnType("int")
                        .HasColumnName("current_participants");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int")
                        .HasColumnName("duration_minutes");

                    b.Property<string>("EquipmentList")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("equipment_list");

                    b.Property<bool>("EquipmentProvided")
                        .HasColumnType("bit")
                        .HasColumnName("equipment_provided");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("event_date");

                    b.Property<TimeSpan>("EventTime")
                        .HasColumnType("time")
                        .HasColumnName("event_time");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int")
                        .HasColumnName("event_type_id");

                    b.Property<bool>("IsPaidRequest")
                        .HasColumnType("bit")
                        .HasColumnName("is_paid_request");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("int")
                        .HasColumnName("max_participants");

                    b.Property<string>("MeetingPoint")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("meeting_point");

                    b.Property<int?>("RelatedRequestId")
                        .HasColumnType("int")
                        .HasColumnName("related_request_id");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("EventDate");

                    b.HasIndex("EventTypeId");

                    b.HasIndex("LocationId");

                    b.HasIndex("RelatedRequestId");

                    b.HasIndex("RequestId");

                    b.HasIndex("StatusId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdminApproved = false,
                            CreatedAt = new DateTime(2025, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorUserId = 1,
                            CurrentParticipants = 0,
                            DurationMinutes = 120,
                            EquipmentProvided = false,
                            EventDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventTime = new TimeSpan(0, 9, 0, 0, 0),
                            EventTypeId = 1,
                            IsPaidRequest = false,
                            LocationId = 1,
                            MaxParticipants = 0,
                            RelatedRequestId = 1,
                            StatusId = 2,
                            Title = "Park Cleanup",
                            UpdatedAt = new DateTime(2025, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AdminApproved = false,
                            CreatedAt = new DateTime(2025, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorUserId = 3,
                            CurrentParticipants = 0,
                            DurationMinutes = 120,
                            EquipmentProvided = false,
                            EventDate = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventTime = new TimeSpan(0, 14, 0, 0, 0),
                            EventTypeId = 2,
                            IsPaidRequest = false,
                            LocationId = 2,
                            MaxParticipants = 0,
                            StatusId = 1,
                            Title = "Beach Education",
                            UpdatedAt = new DateTime(2025, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.EventParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("joined_at");

                    b.Property<int>("PointsEarned")
                        .HasColumnType("int")
                        .HasColumnName("points_earned");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("attendance_status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("EventId", "UserId")
                        .IsUnique();

                    b.ToTable("EventParticipants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EventId = 1,
                            JoinedAt = new DateTime(2025, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PointsEarned = 0,
                            Status = 0,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            EventId = 1,
                            JoinedAt = new DateTime(2025, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PointsEarned = 0,
                            Status = 0,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.EventStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EventStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Draft"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Published"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 4,
                            Name = "InProgress"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Cancelled"
                        });
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.EventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EventTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cleanup"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Community "
                        },
                        new
                        {
                            Id = 3,
                            Name = "Fundraiser"
                        });
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.GalleryReaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int>("GalleryShowcaseId")
                        .HasColumnType("int")
                        .HasColumnName("gallery_showcase_id");

                    b.Property<int>("ReactionType")
                        .HasColumnType("int")
                        .HasColumnName("reaction_type");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("GalleryShowcaseId", "UserId")
                        .IsUnique();

                    b.ToTable("GalleryReactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GalleryShowcaseId = 1,
                            ReactionType = 0,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GalleryShowcaseId = 1,
                            ReactionType = 0,
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GalleryShowcaseId = 1,
                            ReactionType = 0,
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GalleryShowcaseId = 1,
                            ReactionType = 1,
                            UserId = 5
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GalleryShowcaseId = 2,
                            ReactionType = 0,
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GalleryShowcaseId = 2,
                            ReactionType = 0,
                            UserId = 4
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GalleryShowcaseId = 2,
                            ReactionType = 0,
                            UserId = 5
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 6, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GalleryShowcaseId = 2,
                            ReactionType = 1,
                            UserId = 6
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GalleryShowcaseId = 3,
                            ReactionType = 0,
                            UserId = 2
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 6, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GalleryShowcaseId = 3,
                            ReactionType = 0,
                            UserId = 5
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GalleryShowcaseId = 4,
                            ReactionType = 0,
                            UserId = 1
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GalleryShowcaseId = 4,
                            ReactionType = 1,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.GalleryShowcase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AfterImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("after_image_url");

                    b.Property<string>("BeforeImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("before_image_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedByAdminId")
                        .HasColumnType("int")
                        .HasColumnName("created_by_admin_id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int>("DislikesCount")
                        .HasColumnType("int")
                        .HasColumnName("dislikes_count");

                    b.Property<int?>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit")
                        .HasColumnName("is_approved");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit")
                        .HasColumnName("is_featured");

                    b.Property<bool>("IsReported")
                        .HasColumnType("bit")
                        .HasColumnName("is_reported");

                    b.Property<int>("LikesCount")
                        .HasColumnType("int")
                        .HasColumnName("likes_count");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    b.Property<int>("ReportCount")
                        .HasColumnType("int")
                        .HasColumnName("report_count");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int")
                        .HasColumnName("request_id");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByAdminId");

                    b.HasIndex("EventId");

                    b.HasIndex("LocationId");

                    b.HasIndex("RequestId");

                    b.ToTable("GalleryShowcases", t =>
                        {
                            t.HasCheckConstraint("CK_GalleryShowcase_RelatedEntity", "request_id IS NOT NULL OR event_id IS NOT NULL");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AfterImageUrl = "https://example.com/images/after/riverbank-park-1.jpg",
                            BeforeImageUrl = "https://example.com/images/before/riverbank-park-1.jpg",
                            CreatedAt = new DateTime(2025, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByAdminId = 1,
                            Description = "Amazing transformation of Riverbank Park after our community cleanup event. Removed over 30 bags of litter and restored the natural beauty.",
                            DislikesCount = 2,
                            IsApproved = true,
                            IsFeatured = true,
                            IsReported = false,
                            LikesCount = 45,
                            LocationId = 1,
                            ReportCount = 0,
                            RequestId = 1,
                            Title = "Riverbank Park Cleanup Success"
                        },
                        new
                        {
                            Id = 2,
                            AfterImageUrl = "https://example.com/images/after/city-beach-2.jpg",
                            BeforeImageUrl = "https://example.com/images/before/city-beach-2.jpg",
                            CreatedAt = new DateTime(2025, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByAdminId = 1,
                            Description = "Volunteers worked together to clean City Beach, removing large amounts of plastic waste and debris from the coastline.",
                            DislikesCount = 1,
                            IsApproved = true,
                            IsFeatured = true,
                            IsReported = false,
                            LikesCount = 78,
                            LocationId = 2,
                            ReportCount = 0,
                            RequestId = 2,
                            Title = "City Beach Plastic Cleanup"
                        },
                        new
                        {
                            Id = 3,
                            AfterImageUrl = "https://example.com/images/after/downtown-square-3.jpg",
                            BeforeImageUrl = "https://example.com/images/before/downtown-square-3.jpg",
                            CreatedAt = new DateTime(2025, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByAdminId = 1,
                            Description = "Local business district cleanup and beautification project completed by community volunteers in Sarajevo's downtown area.",
                            DislikesCount = 0,
                            IsApproved = true,
                            IsFeatured = false,
                            IsReported = false,
                            LikesCount = 32,
                            LocationId = 3,
                            ReportCount = 0,
                            RequestId = 3,
                            Title = "Downtown Square Revitalization"
                        },
                        new
                        {
                            Id = 4,
                            AfterImageUrl = "https://example.com/images/after/forest-trail-4.jpg",
                            BeforeImageUrl = "https://example.com/images/before/forest-trail-4.jpg",
                            CreatedAt = new DateTime(2025, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByAdminId = 1,
                            Description = "Hiking trail cleared of fallen branches and litter, new trail markers installed for better navigation.",
                            DislikesCount = 3,
                            IsApproved = true,
                            IsFeatured = false,
                            IsReported = false,
                            LikesCount = 28,
                            LocationId = 4,
                            ReportCount = 0,
                            RequestId = 4,
                            Title = "Forest Trail Maintenance Project"
                        });
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(10, 8)
                        .HasColumnType("decimal(10,8)")
                        .HasColumnName("latitude");

                    b.Property<int>("LocationType")
                        .HasColumnType("int")
                        .HasColumnName("location_type");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(11, 8)
                        .HasColumnType("decimal(11,8)")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("postal_code");

                    b.HasKey("Id");

                    b.HasIndex("Latitude", "Longitude");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Mostar",
                            Country = "BiH",
                            CreatedAt = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 43.3436m,
                            LocationType = 4,
                            Longitude = 17.8083m,
                            Name = "Riverbank Park"
                        },
                        new
                        {
                            Id = 2,
                            City = "Neum",
                            Country = "BiH",
                            CreatedAt = new DateTime(2025, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 42.4300m,
                            LocationType = 2,
                            Longitude = 18.6413m,
                            Name = "City Beach"
                        },
                        new
                        {
                            Id = 3,
                            City = "Sarajevo",
                            Country = "BiH",
                            CreatedAt = new DateTime(2025, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 43.8564m,
                            LocationType = 0,
                            Longitude = 18.4131m,
                            Name = "Downtown Square"
                        },
                        new
                        {
                            Id = 4,
                            City = "Sarajevo",
                            Country = "BiH",
                            CreatedAt = new DateTime(2025, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 43.7000m,
                            LocationType = 3,
                            Longitude = 18.0000m,
                            Name = "Forest Trail"
                        });
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsPushed")
                        .HasColumnType("bit")
                        .HasColumnName("is_pushed");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit")
                        .HasColumnName("is_read");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int")
                        .HasColumnName("notification_type");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("read_at");

                    b.Property<int?>("RewardId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("title");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RewardId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPushed = false,
                            IsRead = false,
                            Message = "We’ve approved your request #1. Thank you!",
                            NotificationType = 0,
                            Title = "Your cleanup request was approved",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPushed = false,
                            IsRead = false,
                            Message = "Don’t forget our Park Cleanup event on 2025-07-01 at 09:00.",
                            NotificationType = 2,
                            Title = "Reminder: Park Cleanup tomorrow",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("category");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("contact_email");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("contact_phone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit")
                        .HasColumnName("is_verified");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("logo_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("website");

                    b.HasKey("Id");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContactEmail = "contact@greenearth.org",
                            CreatedAt = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Environmental NGO",
                            IsActive = true,
                            IsVerified = false,
                            Name = "GreenEarth",
                            UpdatedAt = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Website = "https://greenearth.org"
                        },
                        new
                        {
                            Id = 2,
                            ContactEmail = "info@oceancare.org",
                            CreatedAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Marine conservation group",
                            IsActive = true,
                            IsVerified = false,
                            Name = "OceanCare",
                            UpdatedAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Website = "https://oceancare.org"
                        });
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("caption");

                    b.Property<int?>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit")
                        .HasColumnName("is_primary");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int")
                        .HasColumnName("order_index");

                    b.Property<int>("PhotoType")
                        .HasColumnType("int")
                        .HasColumnName("photo_type");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int")
                        .HasColumnName("request_id");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("uploaded_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("uploader_user_id");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("RequestId");

                    b.HasIndex("UserId");

                    b.ToTable("Photos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Caption = "Initial state of Riverbank Park with scattered litter",
                            ImageUrl = "https://example.com/photos/riverbank-before-1.jpg",
                            IsPrimary = true,
                            OrderIndex = 1,
                            PhotoType = 1,
                            RequestId = 1,
                            UploadedAt = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Caption = "Clean Riverbank Park after community cleanup",
                            ImageUrl = "https://example.com/photos/riverbank-after-1.jpg",
                            IsPrimary = false,
                            OrderIndex = 2,
                            PhotoType = 2,
                            RequestId = 1,
                            UploadedAt = new DateTime(2025, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Caption = "City Beach covered with plastic waste",
                            ImageUrl = "https://example.com/photos/beach-before-1.jpg",
                            IsPrimary = true,
                            OrderIndex = 1,
                            PhotoType = 1,
                            RequestId = 2,
                            UploadedAt = new DateTime(2025, 6, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            Caption = "Pristine City Beach after plastic removal",
                            ImageUrl = "https://example.com/photos/beach-after-1.jpg",
                            IsPrimary = false,
                            OrderIndex = 2,
                            PhotoType = 2,
                            RequestId = 2,
                            UploadedAt = new DateTime(2025, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3
                        },
                        new
                        {
                            Id = 5,
                            Caption = "Downtown Square before cleanup",
                            ImageUrl = "https://example.com/photos/downtown-before-1.jpg",
                            IsPrimary = true,
                            OrderIndex = 1,
                            PhotoType = 1,
                            RequestId = 3,
                            UploadedAt = new DateTime(2025, 6, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 4
                        },
                        new
                        {
                            Id = 6,
                            Caption = "Revitalized Downtown Square",
                            ImageUrl = "https://example.com/photos/downtown-after-1.jpg",
                            IsPrimary = false,
                            OrderIndex = 2,
                            PhotoType = 2,
                            RequestId = 3,
                            UploadedAt = new DateTime(2025, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 4
                        },
                        new
                        {
                            Id = 7,
                            Caption = "Forest trail blocked by debris",
                            ImageUrl = "https://example.com/photos/forest-before-1.jpg",
                            IsPrimary = true,
                            OrderIndex = 1,
                            PhotoType = 1,
                            RequestId = 4,
                            UploadedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 5
                        },
                        new
                        {
                            Id = 8,
                            Caption = "Clear forest trail with new markers",
                            ImageUrl = "https://example.com/photos/forest-after-1.jpg",
                            IsPrimary = false,
                            OrderIndex = 2,
                            PhotoType = 2,
                            RequestId = 4,
                            UploadedAt = new DateTime(2025, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 5
                        },
                        new
                        {
                            Id = 9,
                            Caption = "Volunteers installing trail markers",
                            ImageUrl = "https://example.com/photos/forest-progress-1.jpg",
                            IsPrimary = false,
                            OrderIndex = 3,
                            PhotoType = 3,
                            RequestId = 4,
                            UploadedAt = new DateTime(2025, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 6
                        });
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ActualRewardMoney")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("actual_reward_money");

                    b.Property<int>("ActualRewardPoints")
                        .HasColumnType("int")
                        .HasColumnName("actual_reward_points");

                    b.Property<string>("AdminNotes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("admin_notes");

                    b.Property<string>("AiAnalysisResult")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ai_analysis_result");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("approved_at");

                    b.Property<int?>("AssignedAdminId")
                        .HasColumnType("int")
                        .HasColumnName("assigned_admin_id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("completed_at");

                    b.Property<string>("CompletionNotes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("completion_notes");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int>("EstimatedAmount")
                        .HasColumnType("int")
                        .HasColumnName("estimated_amount");

                    b.Property<int?>("EstimatedCleanupTime")
                        .HasColumnType("int")
                        .HasColumnName("estimated_cleanup_time");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    b.Property<DateTime?>("ProposedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("proposed_date");

                    b.Property<TimeSpan?>("ProposedTime")
                        .HasColumnType("time")
                        .HasColumnName("proposed_time");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("rejection_reason");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    b.Property<decimal>("SuggestedRewardMoney")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("suggested_reward_money");

                    b.Property<int>("SuggestedRewardPoints")
                        .HasColumnType("int")
                        .HasColumnName("suggested_reward_points");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<int>("UrgencyLevel")
                        .HasColumnType("int")
                        .HasColumnName("urgency_level");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("WasteTypeId")
                        .HasColumnType("int")
                        .HasColumnName("waste_type_id");

                    b.HasKey("Id");

                    b.HasIndex("AssignedAdminId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("LocationId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.HasIndex("WasteTypeId");

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActualRewardMoney = 0m,
                            ActualRewardPoints = 0,
                            CreatedAt = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EstimatedAmount = 0,
                            LocationId = 1,
                            StatusId = 1,
                            SuggestedRewardMoney = 0m,
                            SuggestedRewardPoints = 0,
                            Title = "Trash at Park",
                            UpdatedAt = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UrgencyLevel = 1,
                            UserId = 2,
                            WasteTypeId = 5
                        },
                        new
                        {
                            Id = 2,
                            ActualRewardMoney = 0m,
                            ActualRewardPoints = 0,
                            AssignedAdminId = 1,
                            CreatedAt = new DateTime(2025, 6, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EstimatedAmount = 2,
                            LocationId = 2,
                            StatusId = 2,
                            SuggestedRewardMoney = 0m,
                            SuggestedRewardPoints = 0,
                            Title = "Plastic on Beach",
                            UpdatedAt = new DateTime(2025, 6, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UrgencyLevel = 2,
                            UserId = 3,
                            WasteTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            ActualRewardMoney = 0m,
                            ActualRewardPoints = 0,
                            AssignedAdminId = 1,
                            CreatedAt = new DateTime(2025, 6, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EstimatedAmount = 1,
                            LocationId = 3,
                            StatusId = 6,
                            SuggestedRewardMoney = 0m,
                            SuggestedRewardPoints = 0,
                            Title = "Downtown Street Cleanup",
                            UpdatedAt = new DateTime(2025, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UrgencyLevel = 1,
                            UserId = 4,
                            WasteTypeId = 5
                        },
                        new
                        {
                            Id = 4,
                            ActualRewardMoney = 0m,
                            ActualRewardPoints = 0,
                            AssignedAdminId = 1,
                            CreatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EstimatedAmount = 0,
                            LocationId = 4,
                            StatusId = 6,
                            SuggestedRewardMoney = 0m,
                            SuggestedRewardPoints = 0,
                            Title = "Forest Trail Maintenance",
                            UpdatedAt = new DateTime(2025, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UrgencyLevel = 0,
                            UserId = 5,
                            WasteTypeId = 7
                        });
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.RequestStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RequestStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Name = "UnderReview"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Approved"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = 5,
                            Name = "InProgress"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Cancelled "
                        });
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Reward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("approved_at");

                    b.Property<int?>("ApprovedByAdminId")
                        .HasColumnType("int")
                        .HasColumnName("approved_by_admin_id");

                    b.Property<int?>("BadgeId")
                        .HasColumnType("int")
                        .HasColumnName("badge_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("currency");

                    b.Property<int?>("DonationId")
                        .HasColumnType("int")
                        .HasColumnName("donation_id");

                    b.Property<int?>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    b.Property<decimal>("MoneyAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("money_amount");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("paid_at");

                    b.Property<int>("PointsAmount")
                        .HasColumnType("int")
                        .HasColumnName("points_amount");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reason");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int")
                        .HasColumnName("request_id");

                    b.Property<int>("RewardTypeId")
                        .HasColumnType("int")
                        .HasColumnName("reward_type_id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByAdminId");

                    b.HasIndex("BadgeId");

                    b.HasIndex("DonationId");

                    b.HasIndex("EventId");

                    b.HasIndex("RequestId");

                    b.HasIndex("RewardTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Rewards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApprovedAt = new DateTime(2025, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 6, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Currency = "USD",
                            MoneyAmount = 0m,
                            PointsAmount = 50,
                            RequestId = 1,
                            RewardTypeId = 1,
                            Status = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            BadgeId = 2,
                            CreatedAt = new DateTime(2025, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Currency = "USD",
                            DonationId = 1,
                            MoneyAmount = 0m,
                            PaidAt = new DateTime(2025, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PointsAmount = 0,
                            RewardTypeId = 3,
                            Status = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.RewardType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RewardTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Points"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Money"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Badge"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Combo"
                        });
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.SystemSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit")
                        .HasColumnName("is_public");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("setting_key");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("setting_type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedByAdminId")
                        .HasColumnType("int")
                        .HasColumnName("updated_by_admin_id");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("setting_value");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("UpdatedByAdminId");

                    b.ToTable("SystemSettings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPublic = true,
                            Key = "default_points_per_cleanup",
                            Type = 1,
                            UpdatedAt = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "50"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPublic = false,
                            Key = "maintenance_mode",
                            Type = 3,
                            UpdatedAt = new DateTime(2025, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "false"
                        });
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.TargetEntityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TargetEntityTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "User"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Request"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Event"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Reward"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Organization"
                        },
                        new
                        {
                            Id = 6,
                            Name = "System "
                        });
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_of_birth");

                    b.Property<DateTime?>("DeactivatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deactivated_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_login");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<string>("ProfileImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("profile_image_url");

                    b.Property<int>("TotalCleanups")
                        .HasColumnType("int")
                        .HasColumnName("total_cleanups");

                    b.Property<int>("TotalEventsOrganized")
                        .HasColumnType("int")
                        .HasColumnName("total_events_organized");

                    b.Property<int>("TotalEventsParticipated")
                        .HasColumnType("int")
                        .HasColumnName("total_events_participated");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("int")
                        .HasColumnName("total_points");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int")
                        .HasColumnName("user_type_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserTypeId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Mostar",
                            Country = "BiH",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alice@example.com",
                            FirstName = "Alice",
                            IsActive = true,
                            LastName = "Anderson",
                            PasswordHash = "HASH1",
                            TotalCleanups = 0,
                            TotalEventsOrganized = 0,
                            TotalEventsParticipated = 0,
                            TotalPoints = 0,
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserTypeId = 1,
                            Username = "alice"
                        },
                        new
                        {
                            Id = 2,
                            City = "Sarajevo",
                            Country = "BiH",
                            CreatedAt = new DateTime(2025, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bob@example.com",
                            FirstName = "Bob",
                            IsActive = true,
                            LastName = "Baker",
                            PasswordHash = "HASH2",
                            TotalCleanups = 0,
                            TotalEventsOrganized = 0,
                            TotalEventsParticipated = 0,
                            TotalPoints = 0,
                            UpdatedAt = new DateTime(2025, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserTypeId = 2,
                            Username = "bob"
                        },
                        new
                        {
                            Id = 3,
                            City = "Mostar",
                            Country = "BiH",
                            CreatedAt = new DateTime(2025, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "carol@example.com",
                            FirstName = "Carol",
                            IsActive = true,
                            LastName = "Clark",
                            PasswordHash = "HASH3",
                            TotalCleanups = 0,
                            TotalEventsOrganized = 0,
                            TotalEventsParticipated = 0,
                            TotalPoints = 0,
                            UpdatedAt = new DateTime(2025, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserTypeId = 4,
                            Username = "carol"
                        },
                        new
                        {
                            Id = 4,
                            City = "Sarajevo",
                            Country = "BiH",
                            CreatedAt = new DateTime(2025, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "david@example.com",
                            FirstName = "David",
                            IsActive = true,
                            LastName = "Davis",
                            PasswordHash = "HASH4",
                            TotalCleanups = 0,
                            TotalEventsOrganized = 0,
                            TotalEventsParticipated = 0,
                            TotalPoints = 0,
                            UpdatedAt = new DateTime(2025, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserTypeId = 2,
                            Username = "david"
                        },
                        new
                        {
                            Id = 5,
                            City = "Mostar",
                            Country = "BiH",
                            CreatedAt = new DateTime(2025, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "eve@example.com",
                            FirstName = "Eve",
                            IsActive = true,
                            LastName = "Evans",
                            PasswordHash = "HASH5",
                            TotalCleanups = 0,
                            TotalEventsOrganized = 0,
                            TotalEventsParticipated = 0,
                            TotalPoints = 0,
                            UpdatedAt = new DateTime(2025, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserTypeId = 2,
                            Username = "eve"
                        },
                        new
                        {
                            Id = 6,
                            City = "Sarajevo",
                            Country = "BiH",
                            CreatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "frank@example.com",
                            FirstName = "Frank",
                            IsActive = true,
                            LastName = "Foster",
                            PasswordHash = "HASH6",
                            TotalCleanups = 0,
                            TotalEventsOrganized = 0,
                            TotalEventsParticipated = 0,
                            TotalPoints = 0,
                            UpdatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserTypeId = 2,
                            Username = "frank"
                        });
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.UserBadge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BadgeId")
                        .HasColumnType("int")
                        .HasColumnName("badge_id");

                    b.Property<DateTime>("EarnedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("earned_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("BadgeId");

                    b.HasIndex("UserId", "BadgeId")
                        .IsUnique();

                    b.ToTable("UserBadges");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BadgeId = 1,
                            EarnedAt = new DateTime(2025, 6, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        });
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Moderator"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Finance"
                        });
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.WasteType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WasteTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Plastic"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Glass"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Metal"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Organic"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Mixed"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Hazardous"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Other "
                        });
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.ActivityHistory", b =>
                {
                    b.HasOne("EcoChallenge.Services.Database.Entities.Donation", null)
                        .WithMany("ActivityLogs")
                        .HasForeignKey("DonationId");

                    b.HasOne("EcoChallenge.Services.Database.Entities.Event", null)
                        .WithMany("ActivityLogs")
                        .HasForeignKey("EventId");

                    b.HasOne("EcoChallenge.Services.Database.Entities.EntityType", "RelatedEntityType")
                        .WithMany()
                        .HasForeignKey("RelatedEntityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoChallenge.Services.Database.Entities.Request", null)
                        .WithMany("History")
                        .HasForeignKey("RequestId");

                    b.HasOne("EcoChallenge.Services.Database.Entities.Reward", null)
                        .WithMany("ActivityLogs")
                        .HasForeignKey("RewardId");

                    b.HasOne("EcoChallenge.Services.Database.Entities.User", "User")
                        .WithMany("ActivityHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RelatedEntityType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.AdminLog", b =>
                {
                    b.HasOne("EcoChallenge.Services.Database.Entities.User", "AdminUser")
                        .WithMany("AdminLogs")
                        .HasForeignKey("AdminUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EcoChallenge.Services.Database.Entities.TargetEntityType", "TargetEntityType")
                        .WithMany()
                        .HasForeignKey("TargetEntityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdminUser");

                    b.Navigation("TargetEntityType");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Badge", b =>
                {
                    b.HasOne("EcoChallenge.Services.Database.Entities.BadgeType", "BadgeType")
                        .WithMany("Badges")
                        .HasForeignKey("BadgeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoChallenge.Services.Database.Entities.CriteriaType", "CriteriaType")
                        .WithMany("Badges")
                        .HasForeignKey("CriteriaTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BadgeType");

                    b.Navigation("CriteriaType");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Donation", b =>
                {
                    b.HasOne("EcoChallenge.Services.Database.Entities.Organization", "Organization")
                        .WithMany("Donations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EcoChallenge.Services.Database.Entities.DonationStatus", "Status")
                        .WithMany("Donations")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoChallenge.Services.Database.Entities.User", "User")
                        .WithMany("Donations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Event", b =>
                {
                    b.HasOne("EcoChallenge.Services.Database.Entities.User", "Creator")
                        .WithMany("CreatedEvents")
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EcoChallenge.Services.Database.Entities.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoChallenge.Services.Database.Entities.Location", "Location")
                        .WithMany("Events")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EcoChallenge.Services.Database.Entities.Request", "RelatedRequest")
                        .WithMany()
                        .HasForeignKey("RelatedRequestId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EcoChallenge.Services.Database.Entities.Request", null)
                        .WithMany("Events")
                        .HasForeignKey("RequestId");

                    b.HasOne("EcoChallenge.Services.Database.Entities.EventStatus", "Status")
                        .WithMany("Events")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("EventType");

                    b.Navigation("Location");

                    b.Navigation("RelatedRequest");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.EventParticipant", b =>
                {
                    b.HasOne("EcoChallenge.Services.Database.Entities.Event", "Event")
                        .WithMany("Participants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoChallenge.Services.Database.Entities.User", "User")
                        .WithMany("EventParticipants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.GalleryReaction", b =>
                {
                    b.HasOne("EcoChallenge.Services.Database.Entities.GalleryShowcase", "GalleryShowcase")
                        .WithMany("Reactions")
                        .HasForeignKey("GalleryShowcaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoChallenge.Services.Database.Entities.User", "User")
                        .WithMany("GalleryReactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GalleryShowcase");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.GalleryShowcase", b =>
                {
                    b.HasOne("EcoChallenge.Services.Database.Entities.User", "CreatedByAdmin")
                        .WithMany("CreatedGalleryShowcases")
                        .HasForeignKey("CreatedByAdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EcoChallenge.Services.Database.Entities.Event", "Event")
                        .WithMany("GalleryShowcases")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EcoChallenge.Services.Database.Entities.Location", "Location")
                        .WithMany("GalleryShowcases")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EcoChallenge.Services.Database.Entities.Request", "Request")
                        .WithMany("GalleryShowcases")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CreatedByAdmin");

                    b.Navigation("Event");

                    b.Navigation("Location");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Notification", b =>
                {
                    b.HasOne("EcoChallenge.Services.Database.Entities.Reward", null)
                        .WithMany("Notifications")
                        .HasForeignKey("RewardId");

                    b.HasOne("EcoChallenge.Services.Database.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Photo", b =>
                {
                    b.HasOne("EcoChallenge.Services.Database.Entities.Event", "Event")
                        .WithMany("Photos")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EcoChallenge.Services.Database.Entities.Request", "Request")
                        .WithMany("Photos")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EcoChallenge.Services.Database.Entities.User", "User")
                        .WithMany("Photos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Request");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Request", b =>
                {
                    b.HasOne("EcoChallenge.Services.Database.Entities.User", "AssignedAdmin")
                        .WithMany("AssignedRequests")
                        .HasForeignKey("AssignedAdminId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EcoChallenge.Services.Database.Entities.Location", "Location")
                        .WithMany("Requests")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EcoChallenge.Services.Database.Entities.RequestStatus", "Status")
                        .WithMany("Requests")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoChallenge.Services.Database.Entities.User", "User")
                        .WithMany("Requests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EcoChallenge.Services.Database.Entities.WasteType", "WasteType")
                        .WithMany()
                        .HasForeignKey("WasteTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedAdmin");

                    b.Navigation("Location");

                    b.Navigation("Status");

                    b.Navigation("User");

                    b.Navigation("WasteType");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Reward", b =>
                {
                    b.HasOne("EcoChallenge.Services.Database.Entities.User", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedByAdminId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EcoChallenge.Services.Database.Entities.Badge", "Badge")
                        .WithMany("Rewards")
                        .HasForeignKey("BadgeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EcoChallenge.Services.Database.Entities.Donation", "Donation")
                        .WithMany("Rewards")
                        .HasForeignKey("DonationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EcoChallenge.Services.Database.Entities.Event", "Event")
                        .WithMany("Rewards")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EcoChallenge.Services.Database.Entities.Request", "Request")
                        .WithMany("Rewards")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EcoChallenge.Services.Database.Entities.RewardType", "RewardType")
                        .WithMany("Rewards")
                        .HasForeignKey("RewardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoChallenge.Services.Database.Entities.User", "User")
                        .WithMany("Rewards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("Badge");

                    b.Navigation("Donation");

                    b.Navigation("Event");

                    b.Navigation("Request");

                    b.Navigation("RewardType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.SystemSetting", b =>
                {
                    b.HasOne("EcoChallenge.Services.Database.Entities.User", "UpdatedBy")
                        .WithMany("UpdatedSettings")
                        .HasForeignKey("UpdatedByAdminId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.User", b =>
                {
                    b.HasOne("EcoChallenge.Services.Database.Entities.UserType", "UserType")
                        .WithMany("Users")
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.UserBadge", b =>
                {
                    b.HasOne("EcoChallenge.Services.Database.Entities.Badge", "Badge")
                        .WithMany("UserBadges")
                        .HasForeignKey("BadgeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EcoChallenge.Services.Database.Entities.User", "User")
                        .WithMany("UserBadges")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Badge");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Badge", b =>
                {
                    b.Navigation("Rewards");

                    b.Navigation("UserBadges");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.BadgeType", b =>
                {
                    b.Navigation("Badges");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.CriteriaType", b =>
                {
                    b.Navigation("Badges");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Donation", b =>
                {
                    b.Navigation("ActivityLogs");

                    b.Navigation("Rewards");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.DonationStatus", b =>
                {
                    b.Navigation("Donations");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Event", b =>
                {
                    b.Navigation("ActivityLogs");

                    b.Navigation("GalleryShowcases");

                    b.Navigation("Participants");

                    b.Navigation("Photos");

                    b.Navigation("Rewards");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.EventStatus", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.EventType", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.GalleryShowcase", b =>
                {
                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Location", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("GalleryShowcases");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Organization", b =>
                {
                    b.Navigation("Donations");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Request", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("GalleryShowcases");

                    b.Navigation("History");

                    b.Navigation("Photos");

                    b.Navigation("Rewards");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.RequestStatus", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.Reward", b =>
                {
                    b.Navigation("ActivityLogs");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.RewardType", b =>
                {
                    b.Navigation("Rewards");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.User", b =>
                {
                    b.Navigation("ActivityHistories");

                    b.Navigation("AdminLogs");

                    b.Navigation("AssignedRequests");

                    b.Navigation("CreatedEvents");

                    b.Navigation("CreatedGalleryShowcases");

                    b.Navigation("Donations");

                    b.Navigation("EventParticipants");

                    b.Navigation("GalleryReactions");

                    b.Navigation("Notifications");

                    b.Navigation("Photos");

                    b.Navigation("Requests");

                    b.Navigation("Rewards");

                    b.Navigation("UpdatedSettings");

                    b.Navigation("UserBadges");
                });

            modelBuilder.Entity("EcoChallenge.Services.Database.Entities.UserType", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
